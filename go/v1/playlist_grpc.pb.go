// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: protos/v1/playlist.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistServiceClient is the client API for PlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistServiceClient interface {
	GetPlaylistList(ctx context.Context, in *GetPlaylistListRequest, opts ...grpc.CallOption) (*GetPlaylistListResponse, error)
	GetPlaylistDetails(ctx context.Context, in *GetPlaylistDetailsRequest, opts ...grpc.CallOption) (*GetPlaylistDetailsResponse, error)
	CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error)
	PutPlaylist(ctx context.Context, in *PutPlaylistRequest, opts ...grpc.CallOption) (*PutPlaylistResponse, error)
	DeletePlaylist(ctx context.Context, in *DeletePlaylistRequest, opts ...grpc.CallOption) (*DeletePlaylistResponse, error)
	UpdatePlaylistSongs(ctx context.Context, in *UpdatePlaylistSongsRequest, opts ...grpc.CallOption) (*UpdatePlaylistSongsResponse, error)
}

type playlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistServiceClient(cc grpc.ClientConnInterface) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) GetPlaylistList(ctx context.Context, in *GetPlaylistListRequest, opts ...grpc.CallOption) (*GetPlaylistListResponse, error) {
	out := new(GetPlaylistListResponse)
	err := c.cc.Invoke(ctx, "/music_streaming.music.playlist.PlaylistService/GetPlaylistList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) GetPlaylistDetails(ctx context.Context, in *GetPlaylistDetailsRequest, opts ...grpc.CallOption) (*GetPlaylistDetailsResponse, error) {
	out := new(GetPlaylistDetailsResponse)
	err := c.cc.Invoke(ctx, "/music_streaming.music.playlist.PlaylistService/GetPlaylistDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error) {
	out := new(CreatePlaylistResponse)
	err := c.cc.Invoke(ctx, "/music_streaming.music.playlist.PlaylistService/CreatePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) PutPlaylist(ctx context.Context, in *PutPlaylistRequest, opts ...grpc.CallOption) (*PutPlaylistResponse, error) {
	out := new(PutPlaylistResponse)
	err := c.cc.Invoke(ctx, "/music_streaming.music.playlist.PlaylistService/PutPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) DeletePlaylist(ctx context.Context, in *DeletePlaylistRequest, opts ...grpc.CallOption) (*DeletePlaylistResponse, error) {
	out := new(DeletePlaylistResponse)
	err := c.cc.Invoke(ctx, "/music_streaming.music.playlist.PlaylistService/DeletePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) UpdatePlaylistSongs(ctx context.Context, in *UpdatePlaylistSongsRequest, opts ...grpc.CallOption) (*UpdatePlaylistSongsResponse, error) {
	out := new(UpdatePlaylistSongsResponse)
	err := c.cc.Invoke(ctx, "/music_streaming.music.playlist.PlaylistService/UpdatePlaylistSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServiceServer is the server API for PlaylistService service.
// All implementations must embed UnimplementedPlaylistServiceServer
// for forward compatibility
type PlaylistServiceServer interface {
	GetPlaylistList(context.Context, *GetPlaylistListRequest) (*GetPlaylistListResponse, error)
	GetPlaylistDetails(context.Context, *GetPlaylistDetailsRequest) (*GetPlaylistDetailsResponse, error)
	CreatePlaylist(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error)
	PutPlaylist(context.Context, *PutPlaylistRequest) (*PutPlaylistResponse, error)
	DeletePlaylist(context.Context, *DeletePlaylistRequest) (*DeletePlaylistResponse, error)
	UpdatePlaylistSongs(context.Context, *UpdatePlaylistSongsRequest) (*UpdatePlaylistSongsResponse, error)
	mustEmbedUnimplementedPlaylistServiceServer()
}

// UnimplementedPlaylistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistServiceServer struct {
}

func (UnimplementedPlaylistServiceServer) GetPlaylistList(context.Context, *GetPlaylistListRequest) (*GetPlaylistListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylistList not implemented")
}
func (UnimplementedPlaylistServiceServer) GetPlaylistDetails(context.Context, *GetPlaylistDetailsRequest) (*GetPlaylistDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylistDetails not implemented")
}
func (UnimplementedPlaylistServiceServer) CreatePlaylist(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) PutPlaylist(context.Context, *PutPlaylistRequest) (*PutPlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) DeletePlaylist(context.Context, *DeletePlaylistRequest) (*DeletePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) UpdatePlaylistSongs(context.Context, *UpdatePlaylistSongsRequest) (*UpdatePlaylistSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaylistSongs not implemented")
}
func (UnimplementedPlaylistServiceServer) mustEmbedUnimplementedPlaylistServiceServer() {}

// UnsafePlaylistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServiceServer will
// result in compilation errors.
type UnsafePlaylistServiceServer interface {
	mustEmbedUnimplementedPlaylistServiceServer()
}

func RegisterPlaylistServiceServer(s grpc.ServiceRegistrar, srv PlaylistServiceServer) {
	s.RegisterService(&PlaylistService_ServiceDesc, srv)
}

func _PlaylistService_GetPlaylistList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetPlaylistList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_streaming.music.playlist.PlaylistService/GetPlaylistList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetPlaylistList(ctx, req.(*GetPlaylistListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_GetPlaylistDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetPlaylistDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_streaming.music.playlist.PlaylistService/GetPlaylistDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetPlaylistDetails(ctx, req.(*GetPlaylistDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_CreatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).CreatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_streaming.music.playlist.PlaylistService/CreatePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).CreatePlaylist(ctx, req.(*CreatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_PutPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).PutPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_streaming.music.playlist.PlaylistService/PutPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).PutPlaylist(ctx, req.(*PutPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_DeletePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).DeletePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_streaming.music.playlist.PlaylistService/DeletePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).DeletePlaylist(ctx, req.(*DeletePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_UpdatePlaylistSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaylistSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).UpdatePlaylistSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music_streaming.music.playlist.PlaylistService/UpdatePlaylistSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).UpdatePlaylistSongs(ctx, req.(*UpdatePlaylistSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistService_ServiceDesc is the grpc.ServiceDesc for PlaylistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "music_streaming.music.playlist.PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlaylistList",
			Handler:    _PlaylistService_GetPlaylistList_Handler,
		},
		{
			MethodName: "GetPlaylistDetails",
			Handler:    _PlaylistService_GetPlaylistDetails_Handler,
		},
		{
			MethodName: "CreatePlaylist",
			Handler:    _PlaylistService_CreatePlaylist_Handler,
		},
		{
			MethodName: "PutPlaylist",
			Handler:    _PlaylistService_PutPlaylist_Handler,
		},
		{
			MethodName: "DeletePlaylist",
			Handler:    _PlaylistService_DeletePlaylist_Handler,
		},
		{
			MethodName: "UpdatePlaylistSongs",
			Handler:    _PlaylistService_UpdatePlaylistSongs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/v1/playlist.proto",
}
